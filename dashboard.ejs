<!DOCTYPE html>
<html>
<head>
  <title>Email Dashboard</title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <style>
    .no-data {
      text-align: center;
      color: red;
      font-weight: bold;
      font-size: 1.2rem; /* Adjusted for better readability */
    }
    .inbox-email {
      color: green;
      font-size: 1rem; /* Adjusted for better readability */
    }
    #hex{
      display: flex;
      justify-content: space-between;
      gap:10px;
      color:red;
      font-size: 19px;
    }
    h5 {
      color: rgb(53, 35, 35);
      background-color: #72717115;
      padding: 4px; /* Slightly increased padding for better spacing */
      border-radius: 10px;
      box-shadow: 0px 1px 3px #ddd; /* Added shadow effect for better visibility */
      font-size: 1.1rem; /* Adjusted font size */
    }
    .spam-email {
      color: red;
      font-size: 1rem; /* Adjusted for better readability */
    }
    .card-body {
      padding:2px;
      max-height: 100px; /* Adjust as needed */
    
    }
    .card-body::-webkit-scrollbar {
      width: 8px;
    }
    .card-body::-webkit-scrollbar-thumb {
      background-color: #888;
      border-radius: 10px;
    }
    .card-body::-webkit-scrollbar-thumb:hover {
      background-color: #555;
    }
    .email-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid #ddd;
      padding: 5px 0;
      font-size: 0.9rem; /* Adjusted for readability */
    }
    .email-item:last-child {
      border-bottom: none;
    }
    .email-item span {
      display: block;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }

   
    .card-deck .card {
      flex: 1;
      margin: 0.5rem;
    }
    
    @media (min-width: 1200px) {
      .card-deck .card {
        flex: 1 54%; /* Two cards per row on large screens */
      }
    }
    
    @media (max-width: 992px) and (min-width: 768px) {
      /* Tablet Mode */
      .card-deck .card {
        flex: 1 100%; /* Single card per row on tablets */
        margin-bottom: 1rem; /* Added margin for better spacing */
      }
      .card-body {
        max-height: 350px; /* Adjusted height for tablets */
      }
      .no-data, .inbox-email, .spam-email, h5 {
        font-size: 1rem; /* Adjust font size for better readability on tablets */
      }
      .email-item {
        padding: 6px 0;
        font-size: 0.9rem; /* Adjust font size for better readability on tablets */
      }
    }
    
    @media (max-width: 768px) {
      .card-deck .card {
        flex: 1 100%; /* Single card per row on mobile */
      }
    }
    
    @media (max-width: 576px) {
      /* Additional adjustments for very small screens */
      .no-data, .inbox-email, .spam-email, h5 {
        font-size: 1rem; /* Reduced font size for small screens */
      }
      .email-item {
        padding: 6px 0;
        font-size: 0.8rem; /* Reduced font size for small screens */
      }
      .card-body {
        max-height: 300px; /* Reduced height for small screens */
      }
    }
</style>

</head>
<body>
  <div class="container mt-4">
    <h1>Email Dashboard</h1>
    <div id="hex"> 
      <!-- <p id="spam1">spam</p id='inbox1'>inbox <p></p> -->
    </div>
    <div id="email-content" class="card-deck">
      <!-- Content will be dynamically updated by JavaScript -->
    </div>
  </div>

  <script>
    var spam = 0;
var invox = 0;

function updateDashboard(data) {
    const container = document.getElementById('email-content');
    container.innerHTML = '';
    const urlParamsr = new URLSearchParams(window.location.search);
    const userr = urlParamsr.get('user');
    console.log('Data received by frontend:', data);

    if (data.emailData.length > 0) {
        data.emailData.forEach(userData => {
            if (userData.emails.length > 0) {
                if (userData.username === userr) {
                    const userDiv = document.createElement('div');
                    userDiv.classList.add('card', 'shadow-sm');

                    const cardBody = document.createElement('div');
                    cardBody.classList.add('card-body');

                    const userHeading = document.createElement('h5');
                    userHeading.textContent = `${userData.folder}: ${userData.user}`;
                    cardBody.appendChild(userHeading);

                    userData.emails.forEach(email => {
                        const folder = userData.folder;
                        console.log(folder);

                        // Increment counters based on the folder
                        if (folder === 'INBOX') {
                            invox++;
                        } else if (folder === '[Gmail]/Spam') {
                            spam++;
                        }

                        const emailClass = folder === 'INBOX' ? 'inbox-email' : 'spam-email';

                        const emailDiv = document.createElement('div');
                        emailDiv.classList.add('email-item');
                        emailDiv.innerHTML = `
                            <span class="email-subject">${email.subject || 'No Subject'}</span>
                            <span class="email-from ${emailClass}">${email.from || 'Unknown Sender'}</span>
                            <span class="email-time">${email.timeAgo || 'Unknown Time'}</span>
                        `;
                        cardBody.appendChild(emailDiv);
                    });

                    userDiv.appendChild(cardBody);
                    container.appendChild(userDiv);
                }
            }
        });

        // Save the counts in localStorage
        localStorage.setItem('spamCount', spam);
        localStorage.setItem('inboxCount', invox);

    } else {
        container.innerHTML = '<p class="no-data">No email data available.</p>';
    }
}

async function fetchData() {
    try {
        // Get the user parameter from the URL or context
        const urlParams = new URLSearchParams(window.location.search);
        const user = urlParams.get('user') || 'default'; // Fallback to 'default' if user is not provided
        console.log(user);
        const response = await fetch(`/api/emails?user=${encodeURIComponent(user)}`);
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        const data = await response.json();

        // Reset counts before updating
        spam = 0;
        invox = 0;

        updateDashboard(data);
    } catch (error) {
        console.log('Error fetching email data:', error);
        document.getElementById('email-content').innerHTML = '<p class="no-data">Error fetching data.</p>';
    }
}

// Fetch data initially and then every 20 seconds
window.addEventListener('load', fetchData);
setInterval(fetchData, 50 * 1000); // 20 seconds

/*const interval = setInterval(() => {
    try {
        document.querySelector("#spam1").textContent = `total spam : ${localStorage.getItem('spamCount') || 0}`;
        document.querySelector("#inbox1").textContent = `total inbox : ${localStorage.getItem('inboxCount') || 0}`;
    } catch (e) {}
}, 1000);
*/
  </script>

  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>
